[
    {
        "id": "90c56aa05a9e0c6c",
        "type": "api-current-state",
        "z": "da379ee1d9aacfd6",
        "name": "leaf current max?",
        "server": "1d3f9c4400ad93a0",
        "version": 3,
        "outputs": 2,
        "halt_if": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.nissan_kontroluj_prad_ladowania",
        "state_type": "habool",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1010,
        "y": 1400,
        "wires": [
            [
                "145e6fb9ce870e48"
            ],
            []
        ]
    },
    {
        "id": "cae0472496d6b85d",
        "type": "inject",
        "z": "da379ee1d9aacfd6",
        "name": "tick 2.5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 120,
        "y": 1340,
        "wires": [
            [
                "42f76a76aca02bcc"
            ]
        ]
    },
    {
        "id": "145e6fb9ce870e48",
        "type": "api-current-state",
        "z": "da379ee1d9aacfd6",
        "name": "currentSource",
        "server": "1d3f9c4400ad93a0",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.faza_l1_current_with_sign",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "currentSource",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1220,
        "y": 1400,
        "wires": [
            [
                "cc359176296cca8b"
            ]
        ]
    },
    {
        "id": "3c49f394562eb66e",
        "type": "api-call-service",
        "z": "da379ee1d9aacfd6",
        "name": "set charging current",
        "server": "1d3f9c4400ad93a0",
        "version": 5,
        "debugenabled": false,
        "domain": "number",
        "service": "set_value",
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "number.ev_charger_22kw_charging_current"
        ],
        "data": "{\"value\":payload}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "first",
        "x": 1700,
        "y": 1340,
        "wires": [
            [
                "7c689595fb28de8a"
            ]
        ]
    },
    {
        "id": "61f0dc534ee0a783",
        "type": "function",
        "z": "da379ee1d9aacfd6",
        "name": "Current Balanced",
        "func": "// Konfiguracja\nconst minCurrent = 8; // Minimalny prąd ładowania (A)\nconst maxCurrent = 25;//32; // Maksymalny prąd ładowania (A)\nconst stepCurrent = 1; // Krok regulacji prądu (A)\n\n// Parametry wejściowe\nconst currentBalance = msg.currentBalance; // Bilans energetyczny (kWh)\nconst remainingMinutes = 60 - (new Date()).getMinutes(); // Minuty do końca godziny\n\n// Aktualny prąd ładowania\nlet currentChargingCurrent = msg.currentChargingCurrent|| minCurrent; //flow.get(\"currentChargingCurrent\") || minCurrent;\n\n// Oblicz energię do skompensowania\nconst energyToCompensate = currentBalance; // Wartość ujemna oznacza potrzebę poboru\n\n// Maksymalny pobór energii w pozostałym czasie (kWh)\nconst maxEnergyConsumption = (remainingMinutes / 60) * maxCurrent * 230 / 1000;\n\n// Minimalny pobór energii w pozostałym czasie (kWh)\nconst minEnergyConsumption = (remainingMinutes / 60) * minCurrent * 230 / 1000;\n\n// Oblicz nowy prąd ładowania\nif (energyToCompensate > maxEnergyConsumption) {\n    currentChargingCurrent = maxCurrent;\n} else if (energyToCompensate < minEnergyConsumption) {\n    currentChargingCurrent = minCurrent;\n} else {\n    // Oblicz optymalny prąd ładowania w celu zbilansowania\n    currentChargingCurrent = Math.round((energyToCompensate * 1000) / (230 * remainingMinutes / 60));\n    currentChargingCurrent = Math.max(minCurrent, Math.min(maxCurrent, currentChargingCurrent));\n    currentChargingCurrent = Math.round(currentChargingCurrent / stepCurrent) * stepCurrent; // Zaokrąglenie do kroku\n}\n\n// Zapisz nowy prąd do kontekstu\n//flow.set(\"currentChargingCurrent\", currentChargingCurrent);\n\n// Wyślij wynik\nmsg.payload = currentChargingCurrent; // Prąd ładowania (A)\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1260,
        "wires": [
            [
                "3c49f394562eb66e"
            ]
        ]
    },
    {
        "id": "fb87744c1c6508b0",
        "type": "api-current-state",
        "z": "da379ee1d9aacfd6",
        "name": "currentBalance",
        "server": "1d3f9c4400ad93a0",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.energia_bilans_netto",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "currentBalance",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1000,
        "y": 1260,
        "wires": [
            [
                "61f0dc534ee0a783"
            ]
        ]
    },
    {
        "id": "e396388f15047c15",
        "type": "api-current-state",
        "z": "da379ee1d9aacfd6",
        "name": "currentChargingCurrent",
        "server": "1d3f9c4400ad93a0",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "number.ev_charger_22kw_charging_current",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "currentChargingCurrent",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 550,
        "y": 1340,
        "wires": [
            [
                "6f34978308997df3"
            ]
        ]
    },
    {
        "id": "6f34978308997df3",
        "type": "api-current-state",
        "z": "da379ee1d9aacfd6",
        "name": "leaf sunshine?",
        "server": "1d3f9c4400ad93a0",
        "version": 3,
        "outputs": 2,
        "halt_if": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.nissan_drive_on_sunshine",
        "state_type": "habool",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 780,
        "y": 1340,
        "wires": [
            [
                "fb87744c1c6508b0"
            ],
            [
                "90c56aa05a9e0c6c"
            ]
        ]
    },
    {
        "id": "cc359176296cca8b",
        "type": "function",
        "z": "da379ee1d9aacfd6",
        "name": "Current Max PID",
        "func": "// Parametry Anti-Windup\nconst maxIntegral = 5; // Maksymalna dopuszczalna wartość integralnej części\nconst minIntegral = -5; // Minimalna dopuszczalna wartość integralnej części\n\n// Parametry PID\nlet kp = 0.4; //było 0.5;  // Proporcjonalne wzmocnienie\nlet ki = 0.05; //było 0.1// Całkowe wzmocnienie\nlet kd = 0.11; //0.08; //było 0.06; // Różniczkowe wzmocnienie\n\n// Wejścia (wartości prądów)\nconst maxCurrent = 20; // Domyślnie 20A\nconst currentSource = msg.currentSource;\nconst currentAdjustable = msg.currentChargingCurrent;\n\n// Bufor dla wartości wejściowych\ncontext.inputBuffer = context.inputBuffer || [];\ncontext.inputBuffer.push(currentSource);\n\n// Zachowaj tylko 5 ostatnich wartości\nif (context.inputBuffer.length > 5) {\n    context.inputBuffer.shift();\n}\n\n// Uśrednij wartości w buforze\nconst filteredCurrentSource = context.inputBuffer.reduce((sum, val) => sum + val, 0) / context.inputBuffer.length;\n\n// Błąd regulacji\nconst error = maxCurrent - filteredCurrentSource;\n\n// Inicjalizacja kontekstu\ncontext.previousError = context.previousError || 0;\ncontext.integral = context.integral || 0;\n\n// Progi do resetowania integralnej części przy dużych zmianach\nconst integralResetThreshold = 5;  // Próg dla dużych zmian w błędzie (np. 5A)\nif (Math.abs(error - context.previousError) > integralResetThreshold) {\n    context.integral = 0;  // Resetowanie integralnej części przy dużych zmianach\n}\n\n// Obliczanie części całkowej (akumulacja błędu)\ncontext.integral += error;\n\n// Zastosowanie Anti-Windup: Ograniczenie wartości integralnej części\nif (context.integral > maxIntegral) {\n    context.integral = maxIntegral;\n} else if (context.integral < minIntegral) {\n    context.integral = minIntegral;\n}\n\n// Obliczanie części różniczkowej\nconst derivative = error - context.previousError;\n\n// Obliczanie wartości wyjścia PID\nlet adjustment = kp * error + ki * context.integral + kd * derivative;\n\n// Dodanie histerezy\nconst upperThreshold = 1;  // Górny próg dla regulacji (np. 1A)\nconst lowerThreshold = -1; // Dolny próg dla regulacji (np. -1A)\n\n// Zmiana tylko, jeśli błąd wykracza poza progi\nif (error > upperThreshold) {\n    adjustment = 1;  // Zwiększenie prądu\n} else if (error < lowerThreshold) {\n    adjustment = -1;  // Zmniejszenie prądu\n} else {\n    adjustment = 0;  // Brak zmiany, gdy błąd jest w obrębie histerezy\n}\n\n// Zaktualizowanie wyjścia\nlet newCurrentAdjustable = currentAdjustable + adjustment;\nnewCurrentAdjustable = Math.round(newCurrentAdjustable);  // Zaokrąglanie do 1A\nnewCurrentAdjustable = Math.min(Math.max(newCurrentAdjustable, 8), 24);  // Ograniczenie zakresu (min 8A, max 20A)\n\n// Zapisz bieżący błąd do kolejnej iteracji\ncontext.previousError = error;\n\n// Wyjście\n/*msg.payload = {\n    currentAdjustable: newCurrentAdjustable,\n    adjustment,\n    error,\n    integral: context.integral,\n};\n*/\nmsg.payload = newCurrentAdjustable;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1400,
        "wires": [
            [
                "3c49f394562eb66e"
            ]
        ]
    },
    {
        "id": "a8c6c47ddc2609bb",
        "type": "comment",
        "z": "da379ee1d9aacfd6",
        "name": "Kontrola prądu ładowania",
        "info": "",
        "x": 150,
        "y": 1260,
        "wires": []
    },
    {
        "id": "42f76a76aca02bcc",
        "type": "api-current-state",
        "z": "da379ee1d9aacfd6",
        "name": "feyree charging?",
        "server": "1d3f9c4400ad93a0",
        "version": 3,
        "outputs": 2,
        "halt_if": "charging",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.ev_charger_22kw_status",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 310,
        "y": 1340,
        "wires": [
            [
                "e396388f15047c15"
            ],
            []
        ]
    },
    {
        "id": "7c689595fb28de8a",
        "type": "debug",
        "z": "da379ee1d9aacfd6",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 1340,
        "wires": []
    },
    {
        "id": "1d3f9c4400ad93a0",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": "at: ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    }
]
